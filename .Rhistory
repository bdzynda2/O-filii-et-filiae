choose(4,3)
choose(6,2)
choose(4,2)
choose(6,3)
6*20
choose(4,1)
choose(6,4)
choose(4,1)
choose(4,0)
choose(6,5)
6+60+120+60+6
252/6
6/252
246/252
246/6
256/6
246/3
252/6
246/6
252/6
choose(3,1)
(3/5)*(60/252)*(42/41)
3*60
5*252
180*42
1260*41
756/6
5166/6
(2/3)+ (3/5)
(2/3)*.5+ (3/5)*.5
5/14
choose(6,4)
60/252
5/21
choose(4,1)*choose(6,4)*.2
6/252 * (1/5)
5/21
5/21*.2
60/252
60/252*.2
(4*(6/252) + 3*(60/252) + 2*120/252 + 60/252) / 5
(3*60)/(2*252)
5/14
729/1849
4/9
43/84
(9/28)+(4/21)
84/28
9*84/(28*43)
27/43
(27/43)**@
(27/43)**2
(4/21)*(84)
16**2
38/60==19/30
19/30
10/19
.5**3
.125*.5
1/16
seq(1,5)
knitr::opts_chunk$set(echo = TRUE)
plot(k, probs, type='l')
geo <- function(x, p){
y = x*p
return(y)
}
k = seq(1,10)
probs = geo(k,0.5)
plot(k, probs, type='l')
probs
geo <- function(x, p, n){
y = x*p^n
return(y)
}
k = seq(1,10)
probs = geo(k,0.5, k)
plot(k, probs, type='l')
geo <- function(x, p, n){
y = x*p^n
return(y)
}
k = seq(1,10)
probs = geo(k,0.5, k)
plot(k, probs,
type='l',
main = 'PMF of Geometric Distribution for Coin Toss',
ylab = 'P(X=x)',
xlab = 'x'
)
k = seq(1,10)
probs = cumsum(geo(k,0.5, k))
plot(k, probs,
type='l',
main = 'PMF of Geometric Distribution for Coin Toss',
ylab = 'P(X=x)',
xlab = 'x'
)
probs = sum(geo(k,0.5, k))
k = seq(1,10)
probs = sum(geo(k,0.5, k))
plot(k, probs,
type='l',
main = 'CDF of Geometric Distribution for Coin Toss',
ylab = 'P(X <= x)',
xlab = 'x'
)
?cumsum
k = seq(1,10)
probs = cumsum(geo(k,0.5, k))
plot(k, probs,
type='l',
main = 'CDF of Geometric Distribution for Coin Toss',
ylab = 'P(X <= x)',
xlab = 'x'
)
probs
k = seq(1,10)
sums = cumsum(geo(k,0.5, k))
plot(k, probs,
type='l',
main = 'CDF of Geometric Distribution for Coin Toss',
ylab = 'P(X <= x)',
xlab = 'x'
)
geo <- function(x, p, n){
y = x*p^n
return(y)
}
k = seq(1,10)
probs = geo(k,0.5, k)
plot(k, probs,
type='l',
main = 'PMF of Geometric Distribution for Coin Toss',
ylab = 'P(X=x)',
xlab = 'x'
)
probs
geo <- function(x, p, n){
y = x*p^(n-1)
return(y)
}
k = seq(1,10)
probs = geo(k,0.5, k)
plot(k, probs,
type='l',
main = 'PMF of Geometric Distribution for Coin Toss',
ylab = 'P(X=x)',
xlab = 'x'
)
geo <- function(x, p, n){
y = x*p^(n)
return(y)
}
k = seq(1,10)
probs = geo(k,0.5, k)
plot(k, probs,
type='l',
main = 'PMF of Geometric Distribution for Coin Toss',
ylab = 'P(X=x)',
xlab = 'x'
)
geo <- function(x, p1, p2){
y = (1 - p1)^(n-1)*p2
return(y)
}
k = seq(1,10)
probs = geo(k,0.5,0.5)
geo <- function(x, p1, p2){
y = (1 - p1)^(x-1)*p2
return(y)
}
k = seq(1,10)
probs = geo(k,0.5,0.5)
plot(k, probs,
type='l',
main = 'PMF of Geometric Distribution for Coin Toss',
ylab = 'P(X=x)',
xlab = 'x'
)
?points
geo <- function(x, p1, p2){
y = (1 - p1)^(x-1)*p2
return(y)
}
k = seq(1,10)
probs = geo(k,0.5,0.5)
plot(k, probs,
type='l',
main = 'PMF of Geometric Distribution for Coin Toss',
ylab = 'P(X=x)',
xlab = 'x'
)
points(k, probs, col='blue')
k = seq(1,10)
sums = cumsum(geo(k,0.5,0.5))
plot(k, probs,
type='l',
main = 'CDF of Geometric Distribution for Coin Toss',
ylab = 'P(X <= x)',
xlab = 'x'
)
k = seq(1,10)
sums = cumsum(geo(k,0.5,0.5))
plot(k, probs,
type='l',
main = 'CDF of Geometric Distribution for Coin Toss',
ylab = 'P(X <= x)',
xlab = 'x'
)
points(k, probs)
k = seq(1,10)
sums = cumsum(geo(k,0.5,0.5))
plot(k, sums,
type='l',
main = 'CDF of Geometric Distribution for Coin Toss',
ylab = 'P(X <= x)',
xlab = 'x'
)
points(k, probs)
?hist
hist(c(k,sums))
?ecdf
plot(ecdf(probs))
sums
plot(ecdf(sums))
plot(ecdf(probs))
plot(ecdf(k))
plot(ecdf(.5*k))
k = seq(1,10)
sums = cumsum(geop(k,0.5,0.5))
asdf = geoc(k, .5)
geoc <- function(x, p1){
y = 1 - (1 - p1)^(x)
return(y)
}
asdf = geoc(k, .5)
plot(ecdf(1-(1-.5)))
asdf
plot(ecdf(asdf))
geop <- function(x, p1, p2){
y = (1 - p1)^(x-1)*p2
return(y)
}
k = seq(1,10)
probs = geo(k,0.5,0.5)
plot(k, probs,
type='l',
main = 'PMF of Geometric Distribution for Coin Toss',
ylab = 'P(X=x)',
xlab = 'x'
)
points(k, probs)
geop <- function(x, p1, p2){
y = (1 - p1)^(x-1)*p2
return(y)
}
k = seq(1,10)
probs = geo(k,0.5,0.5)
plot(k, probs,
type='l',
main = 'PMF of Geometric Distribution for Coin Toss',
ylab = 'P(X=x)',
xlab = 'x'
)
points(k, probs)
k = seq(1,10)
sums = cumsum(geop(k,0.5,0.5))
geoc <- function(x, p1){
y = 1 - (1 - p1)^(x)
return(y)
}
asdf = geoc(k, .5)
plot(k, sums,
main = 'CDF of Geometric Distribution for Coin Toss',
ylab = 'P(X <= x)',
xlab = 'x'
)
points(k, probs)
0.99-1
-.010*.-
5
log(0.01)
log(0.01) / -3
log(0.01)*-3
1.5*((32/5)+(-16/2)+(8/3))
8*12
sin(0)
?factorial
choose(3,2)
gamma(10)
gamma(1)
knitr::opts_chunk$set(echo = TRUE)
funky1 <- function(x){
return(x^2 + 2*x -1)
}
funky1(0)
funky1(1)
?lapply(list, function)
?lapply
lappy(dat, funky1)
dat = c(0,1,10)
lapply(dat, funky1)
apply(dat, funky1)
?apply
dat
apply(dat, 1, funky1)
dim(dat)
class(dat)
dat = as.vector(c(0,1,10))
class(dat)
dat
dat = matrix(c(0,1,10), nrow = 3, ncol = 1)
dat
apply(dat, 1, funky1)
sapply(dat, 1, funky1)
?sapply(dat, funky1)
sapply(dat, funky1)
funky2 <- function(x){
return( (2*pi)^(-1) * exp(-x^2/2) )
}
dat = matrix(c(-1.96, 0, 1.96), nrow = 3, ncol = 1)
apply(dat, 1, funky1)
return( (2*pi)^(-1) * exp((-x^2)/2) )
funky2 <- function(x){
return( (2*pi)^(-1) * exp((-x^2)/2) )
}
dat = matrix(c(-1.96, 0, 1.96), nrow = 3, ncol = 1)
apply(dat, 1, funky1)
?norm
?pnorm
funky2 <- function(x){
return( (2*pi)^(-1) * exp((-(x)^2)/2) )
}
dat = matrix(c(-1.96, 0, 1.96), nrow = 3, ncol = 1)
apply(dat, 1, funky1)
funky2 <- function(x){
return( ((2*pi)^(-1) * exp((-x^2)/2)) )
}
dat = matrix(c(-1.96, 0, 1.96), nrow = 3, ncol = 1)
apply(dat, 1, funky1)
exp(1)
w = 4; w
x = 2.4; x
y = w^x - log(x); y
z = x + y - z; z
knitr::opts_chunk$set(echo = TRUE)
z = seq(1,40)
z
t(z) %*% z
cumsum((1/3)^z)
z
summation = rep(0,length(z))
for(i in 1:length(z)){
summation[i] = (1/3)^z[i]
}
sum(summation)
sum((1/3)^z)
sum(exp(z))
sum(exp(z[1:2]))
exp(1) + exp(2)
sum(z*(z-1))
curve(sin(x), from=0, to = 4*pi)
curve(e^x, from=0, to=3)
curve(exp(x), from=0, to=3)
u <- (i,j, a){
return( (i+j)^a )
}
u <- function(i,j, a){
return( (i+j)^a )
}
u(1,1,.5)
u(i,j,a=.5)
i = c(5,4,3,2,1)
j = c(5,4,3,2,1)
u(i,j,a=.5)
i = c(7,6,5,4,3,2,1)
j = c(7,6,5,4,3,2,1)
u(i,j,a=.5)
i = c(7)
j = c(7,6,5,4,3,2,1)
u(i,j,a=.5)
diff[i] = inc[lenght(inc)-i] - inc[length(inc)-(i+1)]
inc = rep(0, length(inc))
inc = u(i,j,a=.5)
inc = rep(0, length(inc))
inc = u(i,j,a=.5)
diff = rep(0, length(inc))
for(i in 0:(length(inc)-1)){
diff[i] = inc[lenght(inc)-i] - inc[length(inc)-(i+1)]
}
inc = u(i,j,a=.5)
diff = rep(0, length(inc))
for(i in 0:(length(inc)-1)){
diff[i] = inc[length(inc)-i] - inc[length(inc)-(i+1)]
}
diff = rep(0, length(inc))
for(i in 0:(length(inc)-1)){
diff[i] = inc[(length(inc)-i)] - inc[(length(inc)-(i+1))]
}
lag(inc)
inc
differences <- function(df, n){
return(df[n] - df[n+1])
}
differences(inc, 1)
2.645751-2.449490
sapply(inc, differences)
sapply(inc, differences(,n))
sapply(inc, differences(df = inc,n))
differences(inc, 1)
differences(inc, 2)
differences(inc, 3)
differences(inc, 4)
differences(inc, 5)
?rbinom
rbinom(1000, 1, .30)
rbinom(1000, 6, .30)
popn = rbinom(1000, 6, .30)
barplot(popn)
summary(popn)
popn = rbinom(1000, 8, .25)
barplot(popn)
summary(popn)
sample(popn, 100, replace = TRUE)
samples = matrix(rep(0, 5000), nrow = 100, ncol = 50)
samples = matrix(rep(0, 5000), nrow = 100, ncol = 50)
for(i in 1:50){
matrix[,i] = sample(popn, 50, replace = TRUE)
}
for(i in 1:50){
matrix[,i] = as.vector(sample(popn, 50, replace = TRUE))
}
for(i in 1:50){
matrix[,i] = t(as.vector(sample(popn, 50, replace = TRUE)))
}
samples = matrix(rep(0, 5000), nrow = 100, ncol = 50)
for(i in 1:50){
matrix[,i] = t(as.vector(sample(popn, 50, replace = TRUE)))
}
t(as.vector(sample(popn, 50, replace = TRUE)))
samples = matrix(rep(0, 5000), nrow = 100, ncol = 50)
for(i in 1:50){
samples[,i] = sample(popn, 50, replace = TRUE)
}
samples[,4]
means = apply(samples, mean)
?apply
means = apply(samples,1, mean)
length(means)
means = apply(samples, 2, mean)
length(means)
means
z = (1 / means)
z
truemean = mean(popn)
truemean = mean(popn); truemean
truevar = var(popn); truevar
hist(z)
mean(z)
var(z)
hist(popn)
for(i in 1:50){
samples[,i] = sample(popn, 100, replace = TRUE)
}
means = apply(samples, 2, mean)
length(means)
z = (1 / means)
hist(z)
mean(z)
var(z)
var(popn) / (truemean^4)
var(popn) / (truemean^4 * sqrt(50))
truemean = mean(popn); truemean
choose(6,1)
pre = c(4.9,5.3,6.2,5.4,5.2)
post = c(4.6,3.8,5.7,4.9,5.1)
?t.test
t.test(pre,post,paired = TRUE)
(mean(pre)-mean(post)) /
summary(t.test(pre,post,paired = TRUE))
test = t.test(pre,post,paired = TRUE)
test$statistic
test$estimate
sd(test)
(mean(pre)-mean(post)) /
sum((pre-post)^2)/4
(mean(pre)-mean(post)) /
sum(pre, -post)
pre
apply(c(pre, -post), 1, sum)
apply(c(pre, -post), 2, sum)
dim(c(pre, post))
apply(as.vector(pre, -post), 2, sum)
as.vector(c(pre, -post))
return(1+2*x-x^2)
x = rpois(1000, 1)
hist(x)
hist(x, breaks = 50)
y = runif(1000, min=0, max =1)
y = runif(1000, min=0, max =1)
avg = cumsum(y) / 1000
avg
y = runif(1000, min=0, max =1)
count = c(1:1000)
avg = cumsum(y) / c
y = runif(1000, min=0, max =1)
count = c(1:1000)
avg = cumsum(y) / count
avgt
avg
plot(avg, type='l')
